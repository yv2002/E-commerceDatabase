//product schema

const mongoose = require('mongoose');
cosnt productSchema = new mongoose.Schema({
title:{
type:string,
},
description:{
type:string,
},
price:{
type:number,
},
discountedPrice:{
type:number,
},
discountPercent:{
type:number,
},
quantity:{
type:number,
required:true,
},
brand:{
type:string,
},sizes:[{
name:{type:String},
qunatity:{type:number}
}],
imageUrl:{
type:String,
},
rating:{
type:mongoose.Schema.Type.ObjectId,
ref:'ratings',
},
],
reviews:[
{
type:mongoose.Schema.Type.ObjectId,
ref:'reviews',
},
],
numRatings:{
type:number,
dafault:0,
},
category:{
type:mongoose.Schema.Type.ObjectId,
ref:'categories',
},
createdAt:{
type:Data,
default:Data.now,
},
});
const Products = mongoose.model('products',productSchema);
module.exprots= products;

//UserSchema

const mongoose = require('mongoose');
const userSchema = new Mongoose.schema({
FirstName:{
type:string,
required:true,
},
lastName:{
type:string,
required:true,
},
password:{
type:string,
required:true,
},
email:{
type:string,
required:true,
},
role:{
type:string,
required:true,
default:"customer"
},
mobile:{
type:string,
},
address:[{
type:mongoose.Schema.Type.ObjectId,
ref:"address"
}],
payment:[{
type:mongoose.Schema.Type.ObjectId,
ref:"paymentInfo"
}],
rating:[{
type:mongoose.Schema.Type.ObjectId,
ref:"rating"
}],
reviews:[{
type:string,
ref:"reviews"
}],
createdAt:{
type:date,
default:date.now()
}
})






























